{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0422\\u0430\\u043D\\u044F\\\\test-case genesis\\\\music-tracks-manager\\\\src\\\\components\\\\createTrackForm\\\\CreateTrackModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { createTrack } from \"../../api/track/trackApi\";\nimport { TextField, Button, Box } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TrackForm = ({\n  onSave\n}) => {\n  _s();\n  const [title, setTitle] = useState(\"\");\n  const [artist, setArtist] = useState(\"\");\n  const [album, setAlbum] = useState(\"\");\n  const [coverImage, setCoverImage] = useState(\"\");\n  const [genres, setGenres] = useState([]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!title || !artist) {\n      alert(\"Title and Artist are required.\");\n      return;\n    }\n    if (coverImage && !/^https?:\\/\\/.*\\.(jpg|jpeg|png|gif)$/.test(coverImage)) {\n      alert(\"Invalid image URL\");\n      return;\n    }\n    const trackData = {\n      title,\n      artist,\n      album,\n      coverImage,\n      genres\n    };\n    try {\n      const newTrack = await createTrack(trackData);\n      if (newTrack) {\n        onSave(newTrack);\n        setTitle(\"\");\n        setArtist(\"\");\n        setAlbum(\"\");\n        setCoverImage(\"\");\n        setGenres([]);\n      }\n    } catch (err) {\n      console.error(\"Помилка створення треку:\", err);\n      alert(\"Не вдалося створити трек\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    onSubmit: handleSubmit,\n    sx: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Track Title\",\n      value: title,\n      onChange: e => setTitle(e.target.value),\n      required: true,\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Artist\",\n      value: artist,\n      onChange: e => setArtist(e.target.value),\n      required: true,\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Album\",\n      value: album,\n      onChange: e => setAlbum(e.target.value),\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Cover Image URL\",\n      value: coverImage,\n      onChange: e => setCoverImage(e.target.value),\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(TrackForm, \"eRRTnR2X5eBf/EK9zWzFjd8puGk=\");\n_c = TrackForm;\nvar _c;\n$RefreshReg$(_c, \"TrackForm\");","map":{"version":3,"names":["React","useState","createTrack","TextField","Button","Box","jsxDEV","_jsxDEV","TrackForm","onSave","_s","title","setTitle","artist","setArtist","album","setAlbum","coverImage","setCoverImage","genres","setGenres","handleSubmit","e","preventDefault","alert","test","trackData","newTrack","err","console","error","component","onSubmit","sx","display","flexDirection","gap","children","label","value","onChange","target","required","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","type","variant","color","_c","$RefreshReg$"],"sources":["C:/Таня/test-case genesis/music-tracks-manager/src/components/createTrackForm/CreateTrackModal.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { createTrack } from \"../../api/track/trackApi\";\r\nimport { CreateTrack } from \"../../api/track/models/CreateTrack\";\r\nimport { TextField, Button, Box } from \"@mui/material\";\r\n\r\ninterface Props {\r\n  onSave: (track: CreateTrack) => void;\r\n}\r\n\r\nexport const TrackForm: React.FC<Props> = ({ onSave }) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [artist, setArtist] = useState(\"\");\r\n  const [album, setAlbum] = useState(\"\");\r\n  const [coverImage, setCoverImage] = useState(\"\");\r\n  const [genres, setGenres] = useState<string[]>([]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!title || !artist) {\r\n      alert(\"Title and Artist are required.\");\r\n      return;\r\n    }\r\n\r\n    if (coverImage && !/^https?:\\/\\/.*\\.(jpg|jpeg|png|gif)$/.test(coverImage)) {\r\n      alert(\"Invalid image URL\");\r\n      return;\r\n    }\r\n\r\n    const trackData: CreateTrack = {\r\n      title,\r\n      artist,\r\n      album,\r\n      coverImage,\r\n      genres,\r\n    };\r\n\r\n    try {\r\n      const newTrack = await createTrack(trackData);\r\n      if (newTrack) {\r\n        onSave(newTrack);\r\n        setTitle(\"\");\r\n        setArtist(\"\");\r\n        setAlbum(\"\");\r\n        setCoverImage(\"\");\r\n        setGenres([]);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Помилка створення треку:\", err);\r\n      alert(\"Не вдалося створити трек\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      component=\"form\"\r\n      onSubmit={handleSubmit}\r\n      sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}\r\n    >\r\n      <TextField\r\n        label=\"Track Title\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n        required\r\n        fullWidth\r\n      />\r\n      <TextField\r\n        label=\"Artist\"\r\n        value={artist}\r\n        onChange={(e) => setArtist(e.target.value)}\r\n        required\r\n        fullWidth\r\n      />\r\n      <TextField\r\n        label=\"Album\"\r\n        value={album}\r\n        onChange={(e) => setAlbum(e.target.value)}\r\n        fullWidth\r\n      />\r\n      <TextField\r\n        label=\"Cover Image URL\"\r\n        value={coverImage}\r\n        onChange={(e) => setCoverImage(e.target.value)}\r\n        fullWidth\r\n      />\r\n      {/* тут можна буде вставити GenreSelector */}\r\n      <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n        Save\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}